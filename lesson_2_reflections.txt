Q1: What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized, Git creates some metadata for the repository
and stores that data in a hidded .git folder withing the main folder of the
repository. In essense, it prepares the directory tree and setting everything up
to track changes. The reason why we initialize the repository is so that we can
tell git that this is supposed to be a repository and Git needs to track changes
as opposed to it being a regular directlry.

Q2: How is the staging area different than from the working directory and the
repository? What value do you think it offers?h

The staging area is an intermediatry between the working directory and the
repository. The staging area keeps track of all the files that are being added
to the repository and also tracks any changes to the repository for filed that
are already being tacked. 

The staging area gives us the advantage of keeping files in the repository that
we want to track and keep the files we don't need to track together. This might 
be useful when we have external resources for files that we need for our
project to work, but we don't necessariry have control over their contant.
Additonally, we might have some "lorem ipsum" type data that we just use for
testing of our software, but that it is complletely random and does not need to
be tracked.

Q3: How can you use the staging area to make sure you have one commit per logical change?

The staging area holds the state of the files before comitting. It starts out
by having the same content of the files as they had it when they were first
checked out from a commit. Once a change has been added to the staging area,
we can compare the staging area with git diff --staged and the most recent
commit to make sure there is only one logical change staged. We also need to
run git status to make sure we don't have any other changed pending or to see
if these other changed should be a part of the cimmit.

Q4: What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are a great way to experiment with new features and improvements
while still keeping the core project intact. This lets you work on 
experimental features while still being able to respond to bug reports and
minor corrections needed to your code. Because branching is so "cheap" we
can have a separate branch for each experimental change/feature. This can 
also help if we are designing different interfaces and want to keep those 
separate. Branching gives us a safe and organized way to keep logical blocks
togeter. We have not seen it yet, but later we cam merge these branches with
the "trunk" or "master" branch and incorporate the changes into our main
project.